[{"D:\\01-starting-project\\src\\index.js":"1","D:\\01-starting-project\\src\\App.js":"2","D:\\01-starting-project\\src\\components\\CourseGoals\\CourseGoalList\\CourseGoalList.js":"3","D:\\01-starting-project\\src\\components\\CourseGoals\\CourseInput\\CourseInput.js":"4","D:\\01-starting-project\\src\\components\\CourseGoals\\CourseGoalItem\\CourseGoalItem.js":"5","D:\\01-starting-project\\src\\components\\UI\\Button\\Button.js":"6"},{"size":169,"mtime":1616577374000,"results":"7","hashOfConfig":"8"},{"size":1533,"mtime":1616577374000,"results":"9","hashOfConfig":"8"},{"size":461,"mtime":1616577374000,"results":"10","hashOfConfig":"8"},{"size":1989,"mtime":1635191158171,"results":"11","hashOfConfig":"8"},{"size":393,"mtime":1616577374000,"results":"12","hashOfConfig":"8"},{"size":438,"mtime":1635191922106,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"b4d3qb",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-starting-project\\src\\index.js",[],["28","29"],"D:\\01-starting-project\\src\\App.js",[],"D:\\01-starting-project\\src\\components\\CourseGoals\\CourseGoalList\\CourseGoalList.js",[],"D:\\01-starting-project\\src\\components\\CourseGoals\\CourseInput\\CourseInput.js",["30","31","32","33","34"],"import React, { useState } from 'react';\r\n\r\nimport Button from '../../UI/Button/Button';\r\nimport './CourseInput.css';\r\n\r\nconst CourseInput = props => {\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n\r\n    const goalInputChangeHandler = event => {\r\n        if (event.target.value.trim().length > 0) {\r\n            setIsValid(true);\r\n        }\r\n        setEnteredValue(event.target.value);\r\n    };\r\n\r\n    const formSubmitHandler = event => {\r\n        event.preventDefault();\r\n        if (enteredValue.trim().length === 0) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n        props.onAddGoal(enteredValue);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={formSubmitHandler}>\r\n            <div className={`form-control ${!isValid ? 'invalid' : ''}`} >\r\n                {/*Here we can see that dynamically we are adding a string to another string, based on the condition \r\n                 isValid*/}\r\n                <label>\r\n                    Course Goal</label>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={goalInputChangeHandler}\r\n                />\r\n            </div>\r\n            <Button type=\"submit\">Add Goal</Button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CourseInput;\r\n{/*style={{ color: !isValid ? 'red' : 'black' }}*/ }\r\n\r\n\r\n{/*style={{*/ }\r\n{/*    borderColor: !isValid ? 'red' : '#ccc',*/ }\r\n{/*    background: !isValid ? 'salmon' : 'transparent'*/ }\r\n{/*}}*/ }\r\n\r\n//} //it is going to handle the given event, but the user wont get any feedback, as a result the input would be valid.\n      // inline styling is given in the below Label tag. Inline styles always have the highest priority in Html.\r\n\r\n      //} //it is going to handle the given event, but the user wont get any feedback, as a result the input would be valid.\n      // inline styling is given in the below Label tag. Inline styles always have the highest priority in Html.\r\n","D:\\01-starting-project\\src\\components\\CourseGoals\\CourseGoalItem\\CourseGoalItem.js",[],"D:\\01-starting-project\\src\\components\\UI\\Button\\Button.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":44,"column":1,"nodeType":"41","messageId":"42","endLine":44,"endColumn":53},{"ruleId":"39","severity":1,"message":"40","line":47,"column":1,"nodeType":"41","messageId":"42","endLine":47,"endColumn":16},{"ruleId":"39","severity":1,"message":"40","line":48,"column":1,"nodeType":"41","messageId":"42","endLine":48,"endColumn":51},{"ruleId":"39","severity":1,"message":"40","line":49,"column":1,"nodeType":"41","messageId":"42","endLine":49,"endColumn":59},{"ruleId":"39","severity":1,"message":"40","line":50,"column":1,"nodeType":"41","messageId":"42","endLine":50,"endColumn":10},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation"]